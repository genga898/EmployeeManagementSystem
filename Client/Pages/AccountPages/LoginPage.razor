@page "/identity/account/login"

<PageTitle>Login</PageTitle>

<div class="container grid place-content-center place-items-center w-full h-full">
    <div class="w-96">
        <EditForm Enhance Model="User" OnValidSubmit="HandleLogin" class="border rounded-lg shadow-lg">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="px-4 py-2 bg-gray-200 rounded-t">Fill in this form to login</div>
            <div class="p-4 rounded-b">
                <div class="grid gap-4">
                    <div>
                        <label for="UserEmail" class="block text-sm font-medium text-gray-700"> Email </label>
                        <InputText
                            type="email"
                            id="UserEmail"
                            @bind-Value="User.Email"
                            class="mt-1 p-3 w-full rounded-md border border-gray-600 sm:text-sm">
                        </InputText>
                    </div>
                    <div>
                        <label for="UserEmail" class="block text-sm font-medium text-gray-700"> Password </label>
                        <InputText
                            type="password"
                            id="UserPassword"
                            @bind-Value="User.Password"
                            class="mt-1 p-3 w-full rounded-md border border-gray-600 sm:text-sm">
                        </InputText>
                    </div>
                    <button class="inline-block px-4 py-2 text-sm font-medium text-white bg-blue-500 hover:bg-blue-300 rounded-lg">Login</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    Login User = new();
    async Task HandleLogin()
    {
        var result = await AccountService.SignInAsync(User);
        if (result.Flag)
        {
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
            {
                Token = result.Token,
                RefreshToken = result.RefreshToken
            });
            NavManager.NavigateTo("/", forceLoad: true);
        }
    }


}