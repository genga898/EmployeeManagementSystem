@implements IDialogContentComponent
@inject IDialogService DialogService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            Add Department
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm Enhance Model="Department" OnValidSubmit="Save">
        <div class="grid">
            <FluentTextField Label="Name" @bind-Value="Department.Name"></FluentTextField>
            <FluentValidationMessage For="@(()=> Department.Name)"></FluentValidationMessage>
        </div>
    </FluentEditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" OnClick="Save">Save</FluentButton>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>


@code
{
    [Parameter] public GeneralDepartmentDTO Department { get; set; } = new();

    [CascadingParameter] public FluentDialog Dialog { get; set; } = default;

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Department);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    async void Save()
    {
        if (string.IsNullOrEmpty(Department.Name))
        {
            await DialogService.ShowErrorAsync("You need to provide a department name", "Alert");
        }
    }

}
